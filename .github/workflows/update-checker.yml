#
# Copyright (c) 2019-2021 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# File: .github/workflows/update-checker.yml
# Description: Source code update checker
#

name: Update Checker

env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  REPO_BRANCH: openwrt-22.03	
  CONFIG_FILE: .config
  TZ: Asia/Shanghai

on:
  workflow_dispatch:
#  schedule:
#    - cron: 0 */18 * * *

jobs:
  check:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@main

    - name: Pull Source
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH $GITHUB_WORKSPACE/openwrt

    - name: Scripts Feeds
      run: |
        echo "src-git kiddin9 https://github.com/Gladtbam/openwrt-packages.git" >> "feeds.conf.default"
        cd $GITHUB_WORKSPACE/openwrt && ./scripts/feeds clean
        cd $GITHUB_WORKSPACE/openwrt && ./scripts/feeds update -a
        cd $GITHUB_WORKSPACE/openwrt && ./scripts/feeds install -a
        
    - name: Compile toolchain
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        [ -e $GITHUB_WORKSPACE/config/$CONFIG_FILE ] && mv $GITHUB_WORKSPACE/config/$CONFIG_FILE $GITHUB_WORKSPACE/openwrt/.config
        make clean
        make defconfig
        make download -j$(nproc)
        make tools/install -j$(nproc)
        make toolchain/install -j$(nproc)

    - name: Get Commit Hash
      id: getHash
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "commitHash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@main
      with:
        path: openwrt
        key: ${{ env.DEVICE_NAME }}-${{ steps.getHash.outputs.commitHash }}

#    - name: Save New Commit Hash
#      if: steps.cacheHash.outputs.cache-hit != 'true'
#      run: |
#        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

#    - name: Trigger build
#      if: steps.cacheHash.outputs.cache-hit != 'true'
#      uses: peter-evans/repository-dispatch@main
#      with:
#        token: ${{ secrets.GITHUB_TOKEN }}
#        event-type: Source Code Update

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
