#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      conf:
        description: 'Config File Name'
        required: false
        default: .config
        type: string
      upload-bin:
        description: 'ä¸Šä¼  Bin ç›®å½•åˆ° artifact'
        required: false
        default: 'false'
        type: string
      upload-firmware:
        description: 'ä¸Šä¼  Firmware ç›®å½•åˆ° artifact'
        required: false
        default: 'true'
      upload-cow:
        description: 'ä¸Šä¼ åˆ°å¥¶ç‰›å¿«ä¼ '
        required: false
        default: 'false'
      upload-wet:
        description: 'ä¸Šä¼ åˆ° WeTransfer'
        required: false
        default: 'false'
      upload-release:
        description: 'ä¸Šä¼ åˆ° Release'
        required: false
        default: 'false'
      upload-dir:
        description: 'ä¸Šä¼ åˆ°äº‘çš„ç›®å½•'
        required: false
        default: firmware
        type: string
  push:
    branches:
      - "main"
    paths:
      - 'config/.config'

env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  REPO_TAG: v22.03.2
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.conf }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: ${{ github.event.inputs.upload-bin }}
  UPLOAD_FIRMWARE: ${{ github.event.inputs.upload-firmware }}
  UPLOAD_COWTRANSFER: ${{ github.event.inputs.upload-cow }}
  UPLOAD_WETRANSFER: ${{ github.event.inputs.upload-wet }}
  UPLOAD_RELEASE: ${{ github.event.inputs.upload-release }}
  UPLOAD_DIR: ${{ github.event.inputs.upload-dir }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/local/lib/android/ /etc/apache2/ /etc/default/mono-xsp4 /etc/nginx/ /opt/hostedtoolcache/ /usr/local/share/chrom* /usr/local/share/edge_driver /usr/local/share/gecko_driver /usr/share/java/selenium-server.jar /usr/local/share/powershell/ /usr/local/share/vcpkg /usr/share/miniconda /home/linuxbrew
        sudo rm -rf $JAVA_HOME_8_X64 $JAVA_HOME_17_X64 $GRAALVM_11_ROOT
        sudo rm -rf /usr/share/dotnet/ /usr/share/php* /opt/az
        sudo apt update
        sudo apt install build-essential clang flex g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget -y
        sudo apt autoremove --purge
        sudo apt clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt && git checkout $REPO_TAG

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e config/$CONFIG_FILE ] && mv config/$CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        zip -r $GITHUB_WORKSPACE/OpenWrt_bin_${{ env.DEVICE_NAME }}.zip $GITHUB_WORKSPACE/openwrt/bin/*
        cd openwrt/bin/targets/*/*
        rm -rf packages
        zip -r $GITHUB_WORKSPACE/OpenWrt_firmware_${{ env.DEVICE_NAME }}.zip *
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        if [ "$UPLOAD_DIR" == 'bin' ]; then 
          ./transfer cow --block 2621440 -s -p 64 --no-progress $GITHUB_WORKSPACE/OpenWrt_bin_${{ env.DEVICE_NAME }}.zip 2>&1 | tee cowtransfer.log;
        elif [ "$UPLOAD_DIR" == 'firmware']; then 
          ./transfer cow --block 2621440 -s -p 64 --no-progress $GITHUB_WORKSPACE/OpenWrt_firmware_${{ env.DEVICE_NAME }}.zip 2>&1 | tee cowtransfer.log;
        else 
          ./transfer cow --block 2621440 -s -p 64 --no-progress $GITHUB_WORKSPACE/OpenWrt_*_${{ env.DEVICE_NAME }}.zip 2>&1 | tee cowtransfer.log; 
        fi
        echo "::notice file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        if [ "$UPLOAD_DIR" == 'bin' ]; then 
          ./transfer wet -s -p 16 --no-progress $GITHUB_WORKSPACE/OpenWrt_bin_${{ env.DEVICE_NAME }}.zip 2>&1 | tee wetransfer.log
        elif [ "$UPLOAD_DIR" == 'firmware']; then 
          ./transfer wet -s -p 16 --no-progress $GITHUB_WORKSPACE/OpenWrt_firmware_${{ env.DEVICE_NAME }}.zip 2>&1 | tee wetransfer.log
        else 
          ./transfer wet -s -p 16 --no-progress $GITHUB_WORKSPACE/OpenWrt_*_${{ env.DEVICE_NAME }}.zip 2>&1 | tee wetransfer.log 
        fi
        echo "::notice file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.DEVICE_NAME }}" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload to release
      uses: svenstaro/upload-release-action@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN}}
        tag: ${{ steps.tag.outputs.release_tag }}
        body: release.txt
        files: $GITHUB_WORKSPACE/OpenWrt*.zip
        overwrite: true

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

